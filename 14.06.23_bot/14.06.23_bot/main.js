import TelegramBot from "node-telegram-bot-api";
import axios from "axios";

const log = console.log;
const TOKEN = '6295520632:AAHjPghF6shzCvT-X15YzYka-3RZ0mVM_9I';
const weatherApiKey = '40f447f6cbf04bf4af345110230206';

const bot = new TelegramBot(TOKEN, { polling: true });

bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ –ø–æ–≥–æ–¥–µ', {
        parse_mode: 'HTML',
        reply_markup: {
            keyboard: [['–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è']],
            one_time_keyboard: true,
        },
    });
});

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const city = msg.text;

    if (msg.text === "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è") {
        try {
            const forecast = await getThreeDayWeather(city);
            const message = formatForecastMessage(forecast);
            bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
        }  catch (error) {
            console.error(error); // –í—ã–≤–µ—Å—Ç–∏ –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ");
        }
        
    } else {
        try {
            const weather = await getWeather(city);
            const message = formatWeatherMessage(weather);
            bot.sendMessage(chatId, message);
        } catch (error) {
            bot.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ")
        }
    }
});

async function getThreeDayWeather(city) {
    const url = `http://api.weatherapi.com/v1/forecast.json?key=${weatherApiKey}&q=${city}&days=3&aqi=no&alerts=no&lang=ru`;
    const response = await axios.get(url);
    return response.data;
}

async function getWeather(city) {
    const url = `https://api.weatherapi.com/v1/current.json?key=${weatherApiKey}&q=${encodeURIComponent(city)}`;
    const response = await axios.get(url);
    return response.data;
}

function formatForecastMessage(forecast) {
    const days = forecast.forecast.days.slice(0, 3);
    const messages = [];

    messages.push('<b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 3 –¥–Ω—è:</b>');
    for (const day of days) {
        const date = day.date;
        const temperature = day.temperature;
        const weather = day.weather;

        const message = `<b>${date}</b>\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temperature}\n–ü–æ–≥–æ–¥–∞: ${weather}`;
        messages.push(message);
    }

    const formattedMessage = messages.join('\n\n');
    return formattedMessage;
}


function formatWeatherMessage(weather) {
    const location = weather.location.name;
    const dateTime = weather.location.localtime;
    const condition = weather.current.condition.text;
    const temperature = weather.current.temp_c;
    const feelsLike = weather.current.feelslike_c;
    const humidity = weather.current.humidity;
    const windSpeed = weather.current.wind_kph;
    const windDirection = weather.current.wind_dir;

    const message = `
      –ì–æ—Ä–æ–¥: <b>${location}</b>
      –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${dateTime}
      –ü–æ–≥–æ–¥–∞: ${getWeatherEmoji(condition)} ${condition}
      –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temperature}¬∞C
      –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: ${feelsLike}¬∞C
      –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${humidity}%
      –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: ${windSpeed} –∫–º/—á
      –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: ${windDirection}
    `;

    return message;
}

function getWeatherEmoji(condition) {
    let emoji = '';

    switch (condition) {
        case 'Sunny':
            emoji = '‚òÄÔ∏è';
            break;
        case 'Clear':
            emoji = '‚òÄÔ∏è';
            break;
        case 'Partly cloudy':
            emoji = 'üå§Ô∏è';
            break;
        case 'Overcast':
            emoji = '‚òÅÔ∏è';
            break;
        case 'Rain':
            emoji = 'üåßÔ∏è';
            break;
        case 'Light rain':
            emoji = 'üåßÔ∏è';
            break;
        case 'Thunderstorm':
            emoji = '‚õà';
            break;
        case 'Snow':
            emoji = '‚ùÑÔ∏è';
            break;
        default:
            emoji = '‚ùì';
            break;
    }

    return emoji;
}

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
